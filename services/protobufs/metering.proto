syntax = "proto3";

//import "google/protobuf/wrappers.proto";
import "google/protobuf/duration.proto";
//import "google/protobuf/empty.proto";

// Not currently supported:
//
// Accessories (Photo Research, Colorimetry Research, Konica/Minolta)
// Apertures (Photo Research, Colorimetry Research, Konica/Minolta)
// Exposure multipliers (i1Pro, i1Pro2, Colorimetry Researxh)
// Filters (Colorimetry Research)
// Ranges (Colorimetry Research)
// Sync Mode (Colorimetry Research)

enum IntegrationMode {
    FIXED = 0;
    MISSING_ADAPTIVE_INTEGRATION_MODE = 1;
    NORMAL_ADAPTIVE = 2;
    MULTI_SAMPLE_NORMAL_ADAPTIVE = 3;
    FAST_ADAPTIVE = 4; // Konica/Minolta CS2000[A]
    MULTI_SAMPLE_FAST_ADAPTIVE = 5; // Konica/Minolta CS2000[A]
}

enum Observer {
  MISSING_OBSERVER = 0;
  TWO_DEGREE_1931 = 1;
  TEN_DEGREE_1964 = 2;
}

enum MeasurementMode {
  MISSING_MEASUREMENT_MODE = 0;
  UNDEFINED = 1;
  EMISSIVE = 2;
  AMBIENT = 3;
  REFLECTIVE = 4;
  TRANSMISSIVE = 5;
}

//enum Quantity {
//  MISSING_QUANTITY= 0;
//  RADIANCE = 1;
//  SPECTRAL_RADIANCE = 2;
//  IRRADIANCE = 3;
//  SPECTRAL_IRRADIANCE = 4;
//  RADIANT_INTENSITY = 5;
//  SPECTRAL_RADIANT_INTENSITY = 6;
//  RADIANT_FLUX = 7;
//  SPECTRAL_RADIANT_FLUX = 8;
//  LUMINANCE = 9;
//  ILLUMINANCE = 10;
//}

enum ColorSpace {
  MISSING_COLOR_SPACE = 0;
  // X-Rite i1Pro SDK
  CIE_LAB = 1;
  CIE_LCh = 2;
  CIE_Luv = 3;
  CIE_LChuv = 4;
  CIE_uv_1960 = 5;
  CIE_uv_1976 = 6;
  CIE_XYZ = 7;
  CIE_xyY = 8;
  Hunter_Lab = 9;
  RxRyYz = 10;
  LAB_mg = 11;
  LCH_mg = 12;
  RGB = 13;
  // Konica/Minolta CS-2000[A]
  Lv_xy = 14; // if 2ยบ observer
  Y_xy_= 15; // if 10ยบ observer
  Lv_uv_1976 = 16; // if 2ยบ observer
  Y_uv_1976 = 17; /// if 10ยบ observer
  Lv_T_duv = 18; // T and duv from 1960 UCS; duv in units of 0.00001 (cf. SMPTE RDD 18)
  Dominant_wavelength_and_excitation_purity = 19;
}

enum Illuminant {
  MISSING_ILLUMINANT = 0;
  EMISSION = 1;
  A = 2;
  B = 3;
  C = 4;
  D50 = 5;
  D55 = 6;
  D65 = 7;
  D75 = 8;
  F2 = 9;
  F7 = 10;
  F11 = 11;
}

message ColorimetricConfiguration {
  ColorSpace color_space = 1;
  Illuminant illuminant = 2;
}

//enum State {
//  MISSING_STATE = 0;
//  UNATTACHED = 1;
//  // before each measurement clients should check how much time has elapsed since the last
//  // measurement and to recalibrate if necessary
//  UNCALIBRATED = 2;
//  CALIBRATION_IN_PROGRESS = 3;
//  CALIBRATED = 4;
//  MEASUREMENT_IN_PROGRESS = 5;
//  MEASURED = 6;
//  READOUT_IN_PROGRESS = 7;
//}

enum Instrument {
  MISSING_INSTRUMENT = 0;
  XRITE_I1PRO = 1;
  XRITE_I1PRO2 = 2;
  XRITE_I1PRO3 = 3;
  KONICA_MINOLTA_CS2000A = 4;
}

message MeterName {
  string name = 1;
}

message CalibrationsUsedAndLeft {
  MeasurementMode mode = 1;
  google.protobuf.Duration used = 2;
  google.protobuf.Duration left = 3;
}

message MeterDescription {
  MeterName name = 1;
  Instrument instrument = 2;
  string make = 3;
  string model = 4;
  string serial_number = 5;
  string firmware_version = 6;
  string sdk_version = 7;
  string adapter_version = 8;
  string adapter_module_version = 9;
  repeated MeasurementMode supported_measurement_modes = 10;
  MeasurementMode current_measurement_mode = 11;
  repeated CalibrationsUsedAndLeft calibrations_used_and_left = 12;
  repeated Observer supported_observers = 13;
  Observer current_observer = 14;
  // modes not listed are unsupported by this device
  repeated IntegrationMode supported_integration_modes = 15;
  IntegrationMode current_integration_mode = 16;
  optional float fixed_integration_time = 17;
  repeated float supported_measurement_angles = 18;
  float current_measurement_angle = 19;
  repeated ColorSpace supported_color_spaces = 20;
  ColorSpace current_color_space = 21;
  repeated Illuminant supported_illuminants = 22;
  Illuminant current_illuminant = 23;
}

//message InventoryResponse {
//  repeated MeterDescription meters = 1;
//}

message StatusRequest {
  MeterName meter_name = 1;
}

message StatusResponse {
  MeterDescription description = 1;
}

message ConfigurationRequest {
  optional MeterName meter_name = 1;
  optional IntegrationMode integration_mode  = 2;
  optional Observer observer = 3;
  optional MeasurementMode measurement_mode = 4;
//    Quantity quantity = 5;
  optional Illuminant illuminant = 6;
  optional ColorSpace color_space = 7;
}

enum ConfigurationSpecificErrorCode {
  MISSING_CONFIGURATION_SPECIFIC_ERROR_CODE = 0;
  UNSUPPORTED_INTEGRATION_MODE = 1;
  UNSUPPORTED_MEASUREMENT_MODE = 2;
}

message ConfigurationError {
  GenericErrorCode generic = 1;
  ConfigurationSpecificErrorCode configuration_specific = 2;
  string message = 3; // For end-users
  string details = 4; // For developers
}

message ConfigurationResponse {
  ConfigurationError error = 1;
}

message CalibrationRequest {
  MeterName meter_name = 1;
  MeasurementMode mode = 2;
}

enum GenericErrorCode {
  MISSING_GENERIC_ERROR_CODE = 0;
  NOT_YET_IMPLEMENTED = 1;
  UNSUPPORTED_CAPABILITY = 2;
  DEVICE_DISCONNECTED = 3;
  DEVICE_BUSY = 4;
  DEVICE_UNRESPONSIVE = 5;
  UNCATEGORIZED_ERROR = 6;
}

enum CalibrationSpecificErrorCode {
  MISSING_CALIBRATION_SPECIFIC_ERROR_CODE = 0;
}

message CalibrationError {
  GenericErrorCode generic_error_code = 1;
  CalibrationSpecificErrorCode calibration_specific = 2;
  string message = 3;
  string details = 4;
}

message CalibrationResponse {
  CalibrationError error = 1;
}

// Capturing the stimulus
message CaptureRequest {
  MeterName meter_name = 1;
}

enum CaptureSpecificErrorCode {
  INSUFFICIENT_ILLUMINATION = 0;
  SKETCHY_ILLUMINATION = 1;
  SATURATION_CAUSING_ILLUMINATION = 2;
}

message CaptureError {
  GenericErrorCode generic = 1;
  CaptureSpecificErrorCode capture_specific = 2;
  string message = 3;
  string details = 4;
}

message CaptureResponse {
  CaptureError error = 1;
  google.protobuf.Duration estimated_duration = 2;
}

//enum MeasurementType {
//  MISSING_MEASUREMENT_TYPE = 0;
//  PHOTOMETRIC= 1;
//  COLORIMETRIC = 2;
//  SPECTRORADIOMETRIC = 3;
//}

// Retrieving the measurement
message RetrievalRequest {
  MeterName meter_name = 1;
  bool spectrum_requested = 2;
  repeated ColorimetricConfiguration colorimetric_configurations = 3;
}

enum RetrievalSpecificErrorCode {
  MISSING_RETRIEVAL_SPECIFIC_ERROR_CODE = 0;
  UNSUPPORTED_MEASUREMENT_TYPE = 1;
  UNSUPPORTED_COLOR_SPACE = 2;
}

message RetrievalError {
  GenericErrorCode generic = 1;
  RetrievalSpecificErrorCode retrieval_specific = 2;
  string details = 3;
}

message TristimulusMeasurement {
  ColorSpace color_space = 1;
  Illuminant illuminant = 2;
  float first = 3;
  float second = 4;
  float third = 5;
}

message SpectralMeasurement {
  repeated float wavelengths = 1;
  repeated float values = 2;
}
message RetrievalResponse {
  RetrievalError error = 1;
  SpectralMeasurement spectral_measurement = 2;
  repeated TristimulusMeasurement tristimulus_measurements = 3;
}

service Metering {
//  rpc Inventory (google.protobuf.Empty) returns (InventoryResponse) {}
  rpc ReportStatus (StatusRequest) returns (StatusResponse) {}
  rpc Calibrate (CalibrationRequest) returns (CalibrationResponse) {}
  rpc Configure (ConfigurationRequest) returns (ConfigurationResponse) {}
  rpc Capture (CaptureRequest) returns (CaptureResponse) {}
  rpc Retrieve (RetrievalRequest) returns (RetrievalResponse) {}
}
